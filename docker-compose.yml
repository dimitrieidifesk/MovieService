version: '3.5'
services:
  db:
    image: postgres:13.0-alpine
    env_file:
      - "config.env"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -q -d ${POSTGRES_DB} -U ${POSTGRES_USER}" ]
      interval: 5s
      timeout: 5s
      retries: 5
    ports:
      - 5432:5432
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    restart: always

  etl_redis:
    image: redis:7.0.9
    restart: always
    env_file:
      - config.env

  movie_api:
    build: movie_api
    env_file:
      - config.env
    ports:
      - 8000:8000
    restart: always

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.7.0
    restart: always
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://${ELASTIC_HOST}:${ELASTIC_PORT}/" ]
      interval: 5s
      timeout: 5s
      retries: 5
    ports:
      - 9200:9200
    environment:
      - "discovery.type=single-node"
    volumes:
      - elasticdata:/usr/share/elasticsearch/data
    env_file:
      - config.env

  etl:
    build: etl
    restart: always
    env_file:
      - config.env
    depends_on:
      - db
      - elasticsearch

  admin_panel:
    build: adminpanel
    env_file:
      - config.env
    volumes:
      - ./adminpanel/movies/migrations:/opt/admin_panel/movies/migrations
    depends_on:
      - db
    ports:
      - 8001:8000
    restart: always

  nginx:
    image: nginx:1.22.1
    volumes:
      - ./nginx_config/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx_config/default.conf:/etc/nginx/conf.d/default.conf
      - ./nginx_config/static:/etc/nginx/static
    depends_on:
      -  movie_api
      -  admin_panel
    ports:
      - 80:80

  worker:
    build: worker
    restart: always
    env_file:
      - config.env


volumes:
  postgres_data:
  elasticdata:
  adminpanel:
  nginx:
